
package com.scottcaruso.dataretrievalclasses;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import android.app.Activity;
import android.app.IntentService;
import android.content.Intent;
import android.os.Bundle;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.util.Log;

//This Service Class talks to GovTrack and returns a string with relevant data about the zip code the user entered.

public class TwitterRetrievalService extends IntentService{

	public static final String MESSENGER_KEY = "messenger";
	public static String dataResponse = "";
	
	public TwitterRetrievalService() 
	{
		super("TwitterRetrievalService");
		// TODO Auto-generated constructor stub
	}

	@Override
	protected void onHandleIntent(Intent intent) 
	{		
		Log.i("onHandleIntent","Service started");
		
		Bundle extras = intent.getExtras();
		Messenger messenger = (Messenger) extras.get(MESSENGER_KEY);
		//Get a string back from SunLight labs using a custom Class housed in a different Java file.
		if (zipString.equals("none"))
		{
			dataResponse = RetrieveDataFromSunlightLabs.retrieveData("http://congress.api.sunlightfoundation.com/legislators/locate?latitude="+latString+"&longitude="+lonString+"&apikey=eab4e1dfef1e467b8a25ed1eab0f7544");
		} else
		{
			dataResponse = RetrieveDataFromSunlightLabs.retrieveData("http://congress.api.sunlightfoundation.com/legislators/legislators/locate?zip="+zipString+"&apikey=eab4e1dfef1e467b8a25ed1eab0f7544");
		}
		//Log.i("Info","Response received based on "+dataResponse);
		//Pass the string back so that it can be parsed into JSON by the DisplayActivity
		
		Message message = Message.obtain();
		message.arg1 = Activity.RESULT_OK; //Tell the MainActivity that the service worked.
		message.obj = dataResponse; //Store the JSON Object to the Main Activity so it can do its magic.
		
		try 
		{
			messenger.send(message);
		} catch (RemoteException e) {
			Log.e("messenger","There was a problem sending the message.");
		}
	}
	
	public static String retrieveData(String urlString)
	{
		URL dataURL;
		Log.i("URL","Data URL created.");
		try 
		{
			dataURL = new URL(urlString);
			String response = getResponse(dataURL);
			//Log.i("Info","Response received: " + response);
			return response;	
		} 
		catch (MalformedURLException e) 
		{
			e.printStackTrace();
			return null;
		}
	}
	
	public static String getResponse(URL url)
	{

		try 
		{
			URLConnection connection = url.openConnection();
			try {
				bin = new BufferedInputStream(connection.getInputStream());
				Log.i("Info","Starting buffered input stream.");
			} catch (Exception e) {
				Log.e("Error","Failed at BufferedInputStream");
				e.printStackTrace();
			}
			
			byte[] contentBytes = new byte[1024];
			int bytesRead = 0;
			StringBuffer responseBuffer = new StringBuffer();
			
			while((bytesRead = bin.read(contentBytes)) != -1)
			{
				response = new String(contentBytes,0,bytesRead);
				responseBuffer.append(response);
			}
			Log.i("Info","Content read and response created.");
			return responseBuffer.toString();
		
		} catch (IOException e) {
			Log.e("Error", "getURLStringResponse");
			e.printStackTrace();
		}
	
		return response;
	}
}
