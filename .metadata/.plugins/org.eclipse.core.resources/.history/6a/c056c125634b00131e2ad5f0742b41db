package com.scottcaruso.polisocially;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.scottcaruso.dataretrievalclasses.DataRetrievalService;
import com.scottcaruso.utilities.Connection_Verification;

import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Messenger;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.text.InputType;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.Toast;

public class Main_Screen extends Activity {
	
	public static LocationManager lm;
	public static String lat;
	public static String lon;
	public static String response;
	public static String location;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main__screen);
        boolean connection = connectionExists();
        //The connection logic below is simply for testing purposes. It will be hooked up when the required classes are built.
        if (connection)
        {
        	Log.i("Info","We are connected.");
    		Toast toast = Toast.makeText(this, "There is a connection to the network!", Toast.LENGTH_LONG);
    		toast.show();
        } else
        {
    		Log.i("Info","No internet connection found.");
    		Toast toast = Toast.makeText(this, "There is no connection to the internet available. Please try again later.", Toast.LENGTH_LONG);
    		toast.show();
        }
        zipcodeClick();
        mainButtonClick();
        
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main__screen, menu);
        return true;
    }
    
    @Override
    public boolean onOptionsItemSelected(MenuItem item){
    	this.createAlert();
    	return true;
    }
    
    
    public void createAlert() {
    	AlertDialog.Builder alert = new AlertDialog.Builder(this);
        alert.setMessage(R.string.about_app);
		AlertDialog alertDialog = alert.create();

		alertDialog.show();  
    }
    
    public boolean connectionExists() {
    	Boolean connected = Connection_Verification.areWeConnected(this);
    	return connected;
    }
    
    public void zipcodeClick() {
    	Button zipButton = (Button) findViewById(R.id.button1);
    	zipButton.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				AlertDialog.Builder alert = new AlertDialog.Builder(Main_Screen.this);

				alert.setTitle("Enter Zip Code");
				alert.setMessage("Please enter a 5-digit zip code.");

				// Set an EditText view to get user input 
				final EditText input = new EditText(Main_Screen.this);
				input.setInputType(InputType.TYPE_CLASS_NUMBER);
				alert.setView(input);
				
				alert.setPositiveButton("Search", new DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						String zipEntered = input.getText().toString();
						if (zipEntered.length() != 5)
						{
							Log.i("Log","Invalid zip code entry: "+zipEntered);
				    		Toast toast = Toast.makeText(Main_Screen.this, "Please enter a valid 5-digit zip code.", Toast.LENGTH_LONG);
				    		toast.show();
						} else
						{
							Log.i("Log","The number entered was "+zipEntered+".");
						}
					}
				});

				alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
				  public void onClick(DialogInterface dialog, int whichButton) {
				    // Canceled.
				  }
				});

				alert.show();
				
			}
		});	
    }
    
    public void mainButtonClick()
    {
    	ImageButton mainButton = (ImageButton) findViewById(R.id.imageButton1);
    	mainButton.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				runGeolocation();
		    	/*Intent nextActivity = new Intent(Main_Screen.this,Politician_Results.class);
				Activity currentActivity = (Activity) Main_Screen.this;
				currentActivity.startActivityForResult(nextActivity, 0);*/
			}
		});
    }
    
    public void startLocationManager()
    {
    	lm = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
    }
    
    public void obtainGeoData()
    {
    	Criteria criteria = new Criteria();
    	criteria.setAccuracy(Criteria.ACCURACY_COARSE);
    	criteria.setCostAllowed(false);
    	String providerName = lm.getBestProvider(criteria, true);
    	final LocationListener listener = new LocationListener() {
    		@Override
    		public void onLocationChanged(Location location) 
    		{
    			Log.i("Info","Location changed!");
    		}

			@Override
			public void onProviderDisabled(String provider) {
				Log.i("Info","Provider Disabled!");
			}

			@Override
			public void onProviderEnabled(String provider) {
				Log.i("Info","Provider Enabled!");
			}

			@Override
			public void onStatusChanged(String provider, int status,
					Bundle extras) 
			{
				Log.i("Info","Location changed!");
			}
    	};
    	lm.requestSingleUpdate(criteria, listener, null);
    	Location thisLocation = lm.getLastKnownLocation(providerName);
    	Double latDouble = thisLocation.getLatitude();
    	Double lonDouble = thisLocation.getLongitude();
    	lat = String.valueOf(latDouble);
    	lon = String.valueOf(lonDouble);
    	Log.i("Current Location","Lat = "+lat+"  Lon = "+lon);
    }
    
    @SuppressLint("HandlerLeak")
	public void runGeolocation()
    {
    	 startLocationManager();
         if (lm != null)
         {
         	obtainGeoData();
         	Handler retrievalHandler = new Handler()
 			{
 				@Override
 				public void handleMessage(Message msg) 
 				{
 					if (msg.arg1 == RESULT_OK)
 					{
 						try {
 							response = (String) msg.obj;
 						} catch (Exception e) {
 							Log.e("Error","There was a problem retrieving the json Response.");
 						}
 						String nullResponse = "{\"results\":[],\"count\":0}";
 						if (response.equals(nullResponse))
 						{
 							Toast toast = Toast.makeText(Main_Screen.this, "There was a problem retrieving Geo data. Please try again later.", Toast.LENGTH_SHORT);
 							toast.show();
 						} else
 						{
 							//When we get a response...
 							/*try {
 								//Try to parse it into a valid location plus state
								JSONObject result = new JSONObject(response);
								JSONArray resultArray = result.getJSONArray("geonames");
								JSONObject thisLocation = resultArray.getJSONObject(0);
								String nearestPlace = thisLocation.getString("toponymName");
								String state = thisLocation.getString("adminCode1");
								location = nearestPlace+", "+state;
								Log.i("Location",location);
							} catch (JSONException e) {
								Log.e("Error","Problem parsing JSON data!");
								e.printStackTrace();*/
							}
 							
 						}
 					}
 				}
 			};
 			Messenger apiMessenger = new Messenger(retrievalHandler);
 			
 			Intent startDataService = new Intent(this, DataRetrievalService.class);
 			startDataService.putExtra(DataRetrievalService.MESSENGER_KEY, apiMessenger);
 			startDataService.putExtra(DataRetrievalService.LON_KEY,lon);
 			startDataService.putExtra(DataRetrievalService.LAT_KEY,lat);
 			this.startService(startDataService);
         }
    }
       
}
