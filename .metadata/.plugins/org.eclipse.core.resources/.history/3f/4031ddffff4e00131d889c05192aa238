package com.scottcaruso.twittertests;

import android.os.AsyncTask;
import android.util.Log;

//Uses an AsyncTask to download a Twitter user's timeline
public class DownloadTwitterTask extends AsyncTask<String, Void, String> {
	final static String CONSUMER_KEY = "W5f9ce3TCVVdFi97yHVoQg";
	final static String CONSUMER_SECRET = "0JKuxFLPfWfu2lLv0veIm2OHogmrNuSPlcHWgEAtSD4";
	final static String TwitterTokenURL = "https://api.twitter.com/oauth/access_token";
	final static String TwitterStreamURL = "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=";

	@Override
	protected String doInBackground(String... screenNames) {
		String result = null;

		if (screenNames.length > 0) {
			result = getTwitterStream(screenNames[0]);
		}
		return result;
	}

	// onPostExecute convert the JSON results into a Twitter object (which is an Array list of tweets
	@Override
	protected void onPostExecute(String result) {
		Log.i("Info",result);

	}
	
	private String getTwitterStream(String screenName) {
		String results = null;

		// Step 1: Encode consumer key and secret
		try {
			// URL encode the consumer key and secret
			String urlApiKey = URLEncoder.encode(CONSUMER_KEY, "UTF-8");
			String urlApiSecret = URLEncoder.encode(CONSUMER_SECRET, "UTF-8");

			// Concatenate the encoded consumer key, a colon character, and the
			// encoded consumer secret
			String combined = urlApiKey + ":" + urlApiSecret;

			// Base64 encode the string
			String base64Encoded = Base64.encodeToString(combined.getBytes(), Base64.NO_WRAP);

			// Step 2: Obtain a bearer token
			HttpPost httpPost = new HttpPost(TwitterTokenURL);
			httpPost.setHeader("Authorization", "Basic " + base64Encoded);
			httpPost.setHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
			httpPost.setEntity(new StringEntity("grant_type=client_credentials"));
			String rawAuthorization = getResponseBody(httpPost);
			Authenticated auth = jsonToAuthenticated(rawAuthorization);

			// Applications should verify that the value associated with the
			// token_type key of the returned object is bearer
			if (auth != null && auth.token_type.equals("bearer")) {

				// Step 3: Authenticate API requests with bearer token
				HttpGet httpGet = new HttpGet(TwitterStreamURL + screenName);

				// construct a normal HTTPS request and include an Authorization
				// header with the value of Bearer <>
				httpGet.setHeader("Authorization", "Bearer " + auth.access_token);
				httpGet.setHeader("Content-Type", "application/json");
				// update the results with the body of the response
				results = getResponseBody(httpGet);
			}
		} catch (UnsupportedEncodingException ex) {
		} catch (IllegalStateException ex1) {
		}
		return results;
	}
}
